pipeline {
     agent any 

    environment {
        SONARQUBE_URL = 'http://192.168.62.25:9000'
        PROJECT_KEY = 'app-de-test'
        SONAR_NODEJS_PATH = '/usr/bin/node'
        DOCKER_IMAGE="my-app"
        DOCKER_REGISTRY="192.168.62.25:3001"
        NEXUS_CREDENTIALS= credentials("pass_nexus")
       
        
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/hass2001/app_test.git']]])
            }
        }

       

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh "/opt/sonar-scanner/bin/sonar-scanner"
                    }
                }
            }
        }

        
   
        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ."
}}

stage ('Tag Docker Image'){
       steps {
           sh "docker tag ${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}"           
       }}

stage('Push Docker Image to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'pass_nexus', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh "docker login -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} ${DOCKER_REGISTRY}"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}"
                }
            }
        }

        stage('Docker Run') {
            steps {

            script {
                    // VÃ©rifier si le conteneur existe et le supprimer s'il existe
                    def containerExists = sh(script: "docker ps -a -f name=my-app --format '{{.Names}}'", returnStdout: true).trim()
                    if (containerExists == 'my-app') {
                        sh "docker rm -f my-app"
                    }
                sh "docker run -d -p 3000:80 --name my-app --restart always ${DOCKER_IMAGE}"
            }
        }}




       

      

        
    }
}
